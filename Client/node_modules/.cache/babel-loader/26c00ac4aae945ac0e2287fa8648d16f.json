{"ast":null,"code":"const sanpham = {\n  sanphams: [],\n  categorys: [],\n  tags: [],\n  slices: [],\n  brands: [],\n  blogs: [],\n  item: null,\n  size: [],\n  lengthBlog: null,\n  itemBlog: null,\n  lengthItem: null,\n  checkScrollLoad: true,\n  history: null\n};\n\nconst Sanpham = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : sanpham;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case \"GET_SANPHAM\":\n      return { ...state,\n        sanphams: action.GET_SANPHAM,\n        lengthItem: action.LastLength,\n        checkScrollLoad: true\n      };\n\n    case \"GET_CATEGORY\":\n      return { ...state,\n        categorys: action.GET_CATEGORY\n      };\n\n    case \"GET_SLICE\":\n      return { ...state,\n        slices: action.GET_SLICE\n      };\n\n    case \"GET_TAG\":\n      return { ...state,\n        tags: action.GET_TAG\n      };\n\n    case \"GET_BRAND\":\n      return { ...state,\n        brands: action.GET_BRAND\n      };\n\n    case \"GET_BLOG\":\n      return { ...state,\n        blogs: action.GET_BLOG,\n        lengthBlog: action.length\n      };\n\n    case \"GET_SIZE\":\n      return { ...state,\n        size: action.GET_SIZE\n      };\n\n    case \"GET_ITEM\":\n      return { ...state,\n        item: action.GET_ITEM\n      };\n\n    case \"GET_ITEMBLOG\":\n      return { ...state,\n        itemBlog: action.GET_ITEMBLOG\n      };\n\n    case \"OFF_SCROLLLOAD\":\n      return { ...state,\n        checkScrollLoad: false\n      };\n\n    case \"HISTORY\":\n      return { ...state,\n        history: action.history\n      };\n\n    default:\n      return state;\n  }\n};\n\n_c = Sanpham;\nexport default Sanpham;\n\nvar _c;\n\n$RefreshReg$(_c, \"Sanpham\");","map":{"version":3,"sources":["C:/Users/ACER/Dropbox/My PC (LAPTOP-JA8PC77O)/Desktop/BTL/RestaurantX/Client/src/Redux/SanPham.js"],"names":["sanpham","sanphams","categorys","tags","slices","brands","blogs","item","size","lengthBlog","itemBlog","lengthItem","checkScrollLoad","history","Sanpham","state","action","type","GET_SANPHAM","LastLength","GET_CATEGORY","GET_SLICE","GET_TAG","GET_BRAND","GET_BLOG","length","GET_SIZE","GET_ITEM","GET_ITEMBLOG"],"mappings":"AACA,MAAMA,OAAO,GAAG;AACZC,EAAAA,QAAQ,EAAC,EADG;AAEZC,EAAAA,SAAS,EAAC,EAFE;AAGZC,EAAAA,IAAI,EAAC,EAHO;AAIZC,EAAAA,MAAM,EAAC,EAJK;AAKZC,EAAAA,MAAM,EAAC,EALK;AAMZC,EAAAA,KAAK,EAAC,EANM;AAOZC,EAAAA,IAAI,EAAC,IAPO;AAQZC,EAAAA,IAAI,EAAC,EARO;AASZC,EAAAA,UAAU,EAAC,IATC;AAUZC,EAAAA,QAAQ,EAAC,IAVG;AAWZC,EAAAA,UAAU,EAAC,IAXC;AAYZC,EAAAA,eAAe,EAAC,IAZJ;AAaZC,EAAAA,OAAO,EAAC;AAbI,CAAhB;;AAkBA,MAAMC,OAAO,GAAG,YAA6B;AAAA,MAA5BC,KAA4B,uEAApBf,OAAoB;AAAA,MAAXgB,MAAW;;AACzC,UAAQA,MAAM,CAACC,IAAf;AACI,SAAK,aAAL;AACI,aAAO,EAAC,GAAGF,KAAJ;AAAUd,QAAAA,QAAQ,EAACe,MAAM,CAACE,WAA1B;AAAsCP,QAAAA,UAAU,EAACK,MAAM,CAACG,UAAxD;AAAmEP,QAAAA,eAAe,EAAC;AAAnF,OAAP;;AACJ,SAAK,cAAL;AACI,aAAO,EAAC,GAAGG,KAAJ;AAAUb,QAAAA,SAAS,EAACc,MAAM,CAACI;AAA3B,OAAP;;AACJ,SAAK,WAAL;AACI,aAAO,EAAC,GAAGL,KAAJ;AAAUX,QAAAA,MAAM,EAACY,MAAM,CAACK;AAAxB,OAAP;;AACJ,SAAK,SAAL;AACI,aAAO,EAAC,GAAGN,KAAJ;AAAUZ,QAAAA,IAAI,EAACa,MAAM,CAACM;AAAtB,OAAP;;AACJ,SAAK,WAAL;AACI,aAAO,EAAC,GAAGP,KAAJ;AAAUV,QAAAA,MAAM,EAACW,MAAM,CAACO;AAAxB,OAAP;;AACJ,SAAK,UAAL;AACI,aAAO,EAAC,GAAGR,KAAJ;AAAUT,QAAAA,KAAK,EAACU,MAAM,CAACQ,QAAvB;AAAgCf,QAAAA,UAAU,EAACO,MAAM,CAACS;AAAlD,OAAP;;AACJ,SAAK,UAAL;AACI,aAAO,EAAC,GAAGV,KAAJ;AAAUP,QAAAA,IAAI,EAACQ,MAAM,CAACU;AAAtB,OAAP;;AACJ,SAAK,UAAL;AACI,aAAO,EAAC,GAAGX,KAAJ;AAAUR,QAAAA,IAAI,EAACS,MAAM,CAACW;AAAtB,OAAP;;AACJ,SAAK,cAAL;AACI,aAAO,EAAC,GAAGZ,KAAJ;AAAUL,QAAAA,QAAQ,EAACM,MAAM,CAACY;AAA1B,OAAP;;AACJ,SAAK,gBAAL;AACI,aAAO,EAAC,GAAGb,KAAJ;AAAUH,QAAAA,eAAe,EAAC;AAA1B,OAAP;;AACJ,SAAK,SAAL;AACI,aAAO,EAAC,GAAGG,KAAJ;AAAUF,QAAAA,OAAO,EAACG,MAAM,CAACH;AAAzB,OAAP;;AACJ;AACI,aAAOE,KAAP;AAxBR;AA0BH,CA3BD;;KAAMD,O;AA6BN,eAAeA,OAAf","sourcesContent":["\r\nconst sanpham = {\r\n    sanphams:[],\r\n    categorys:[],\r\n    tags:[],\r\n    slices:[],\r\n    brands:[],\r\n    blogs:[],\r\n    item:null,\r\n    size:[],\r\n    lengthBlog:null,\r\n    itemBlog:null,\r\n    lengthItem:null,\r\n    checkScrollLoad:true,\r\n    history:null\r\n}\r\n\r\n\r\n\r\nconst Sanpham = (state = sanpham, action) => {\r\n    switch (action.type) {\r\n        case \"GET_SANPHAM\":\r\n            return {...state,sanphams:action.GET_SANPHAM,lengthItem:action.LastLength,checkScrollLoad:true}\r\n        case \"GET_CATEGORY\":\r\n            return {...state,categorys:action.GET_CATEGORY}\r\n        case \"GET_SLICE\":\r\n            return {...state,slices:action.GET_SLICE}\r\n        case \"GET_TAG\":\r\n            return {...state,tags:action.GET_TAG}\r\n        case \"GET_BRAND\":\r\n            return {...state,brands:action.GET_BRAND}\r\n        case \"GET_BLOG\":\r\n            return {...state,blogs:action.GET_BLOG,lengthBlog:action.length}\r\n        case \"GET_SIZE\":\r\n            return {...state,size:action.GET_SIZE}\r\n        case \"GET_ITEM\":\r\n            return {...state,item:action.GET_ITEM}  \r\n        case \"GET_ITEMBLOG\":\r\n            return {...state,itemBlog:action.GET_ITEMBLOG}\r\n        case \"OFF_SCROLLLOAD\":\r\n            return {...state,checkScrollLoad:false}   \r\n        case \"HISTORY\":\r\n            return {...state,history:action.history}         \r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport default Sanpham\r\n"]},"metadata":{},"sourceType":"module"}